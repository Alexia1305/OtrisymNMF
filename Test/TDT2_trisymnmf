using MAT
using Printf
using LightGraphs 
using Plots 
using LinearAlgebra
using GraphPlot
using Random
Random.seed!(123)
include("../algo/algo_symTriONMF.jl")
include("../algo/ONMF.jl")
include("../algo/symNMF.jl")
include("../algo/TrisymNMF_CD.jl")



function test(X)
    X=X*X'
    X=Matrix(X)

    ###########OPTIONS##################################################
    r =15
    init="sspa"
    maxiter=10000
    timelimit=80
    epsi=10e-7
    nbr_algo=1
    lambda= [0.0195]
    nbr_tests=length(lambda)
    # Initialisation des tableaux pour stocker les temps et les erreurs
    n=size(X)[1]
    println(n)
    Wb=zeros(n,r)
    Sb=zeros(r,r)
    temps_execution = zeros(nbr_algo,nbr_tests)
    erreurs = zeros(nbr_algo,nbr_tests)
    best_erreur=+Inf 
    # Boucle pour effectuer les tests
    for i in 1:nbr_tests
        temps_execution[1,i] = @elapsed begin
            W, S, erreur  =TrisymNMF_CD(X, r,lambda[i], maxiter,epsi,init,timelimit)
        end
        erreurs[1,i] = erreur
        
        println("lambda : ",lambda[i])
        println("erreur rel : ",norm(X-W*S*W',2)/norm(X,2))
        println("time : ",temps_execution[1,i])
        println("nombre moyen de cluster par mot",count(x -> x != 0, W)/n)
        if erreur<best_erreur
            best_erreur=erreur
            Wb=W
            Sb=S
        end 
    end

    
    
    



   
    return Wb,Sb
end 

# Charger le fichier karate.mat
file_path = "dataset/subsampleTDT2.mat"
mat = matread(file_path)
X = mat["Xkl"]
words=mat["wordsK"]
Wb,Sb=test(X)
n,r=size(Wb)

classement = Vector{Vector{Any}}(undef, r)  # Crée un vecteur de r listes vides

# Initialisation des listes vides
for i in 1:r
    club = findall(Wb[:, i] .> 0)
    classement[i] = words[club]
    println("classement",i)
    println("┌───────┐")
    for str in classement[i]
        println("│ ", str, " │")
    end
    println("└───────┘")
    println("10 éléments les plus importants ")
    # Obtenir les indices qui trieraient le vecteur dans l'ordre décroissant
    indices_tries = sortperm(Wb[:,i], rev=true)

    # Prendre les 110 derniers indices
    indices_10_plus_grands = indices_tries[1:8]
    println(words[indices_10_plus_grands])

end
for i in 1:n
    club = findall(Wb[i, :] .> 0)
    if length(club)>1
        println(words[i]," class : ",club)
    end 
end 

grayscale_palette = cgrad([:white, :black])
heatmap(Sb, color=grayscale_palette, xlabel="X Axis Label", ylabel="Y Axis Label", title="Heatmap Title",
        xticks=(1:r, 1:r), yticks=(1:r, 1:r))
savefig("heatmap.png")


# Créer un dictionnaire contenant la matrice W
variables = Dict("W" => Wb)

# Enregistrer le fichier .mat
matwrite("Wt.mat", variables)
# Créer un dictionnaire contenant la matrice W
variableS= Dict("S" => Sb)


# Enregistrer le fichier .mat
matwrite("St.mat", variableS)